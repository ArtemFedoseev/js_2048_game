{"version":3,"sources":["scripts/main.js"],"names":["root","document","querySelector","actionButton","gameScore","loseMessage","winMessage","startMessage","MULTIPLIER","Game","matrix","isStarted","score","addEventListener","handleStart","handleRestart","e","includes","key","calculateMove","render","direction","valuesBeforeMove","getMatrixValues","useMatrix","getMatrixCopy","changesMade","manipulateMatrixCells","rotateMatrix","valuesAfterMove","forEach","valueBeforeMove","i","setCellValue","getRandomCellCoords","getRandomCellValue","length","moveCells","mergeCells","numberOfTimes","rotations","initialMatrix","j","k","map","row","madeMoves","movesCounter","classList","toggle","coords","value","availableCells","cell","push","randomCellNumber","Math","floor","random","values","renderCells","renderScore","renderActionButton","renderMessages","cells","querySelectorAll","matrixValues","useClass","innerText","replace","add","remove","didWin","didLose","testMatrixes","testMatrix","game","startApp"],"mappings":"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","file":"main.2c9a0c6b.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst root = document.querySelector('body');\r\nconst actionButton = root.querySelector('.button');\r\nconst gameScore = root.querySelector('.game-score');\r\nconst loseMessage = root.querySelector('.message-lose');\r\nconst winMessage = root.querySelector('.message-win');\r\nconst startMessage = root.querySelector('.message-start');\r\nconst MULTIPLIER = 2;\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.matrix = [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ];\r\n    this.isStarted = false;\r\n    this.score = 0;\r\n  }\r\n\r\n  startApp() {\r\n    actionButton.addEventListener('click', () => {\r\n      this.isStarted = !this.isStarted;\r\n\r\n      if (this.isStarted) {\r\n        this.handleStart();\r\n      } else {\r\n        this.handleRestart();\r\n      }\r\n    });\r\n\r\n    root.addEventListener('keydown', (e) => {\r\n      const useKeys = [\r\n        'ArrowLeft',\r\n        'ArrowRight',\r\n        'ArrowUp',\r\n        'ArrowDown',\r\n      ];\r\n\r\n      if (!useKeys.includes(e.key) || !this.isStarted) {\r\n        return;\r\n      }\r\n\r\n      switch (e.key) {\r\n        case 'ArrowDown':\r\n          this.calculateMove('DOWN');\r\n          break;\r\n        case 'ArrowUp':\r\n          this.calculateMove('UP');\r\n          break;\r\n        case 'ArrowRight':\r\n          this.calculateMove('RIGHT');\r\n          break;\r\n        case 'ArrowLeft':\r\n          this.calculateMove('LEFT');\r\n          break;\r\n      }\r\n\r\n      this.render();\r\n    });\r\n  };\r\n\r\n  calculateMove(direction) {\r\n    const valuesBeforeMove = this.getMatrixValues();\r\n    const useMatrix = this.getMatrixCopy(this.matrix);\r\n    let changesMade = false;\r\n\r\n    switch (direction) {\r\n      case 'LEFT':\r\n        this.manipulateMatrixCells(useMatrix);\r\n        break;\r\n      case 'RIGHT':\r\n        this.rotateMatrix(useMatrix, 2);\r\n        this.manipulateMatrixCells(useMatrix);\r\n        this.rotateMatrix(useMatrix, 2);\r\n        break;\r\n      case 'UP':\r\n        this.rotateMatrix(useMatrix, 3);\r\n        this.manipulateMatrixCells(useMatrix);\r\n        this.rotateMatrix(useMatrix, 1);\r\n        break;\r\n      case 'DOWN':\r\n        this.rotateMatrix(useMatrix, 1);\r\n        this.manipulateMatrixCells(useMatrix);\r\n        this.rotateMatrix(useMatrix, 3);\r\n        break;\r\n    }\r\n\r\n    this.matrix = useMatrix;\r\n\r\n    const valuesAfterMove = this.getMatrixValues();\r\n\r\n    valuesBeforeMove.forEach((valueBeforeMove, i) => {\r\n      if (valueBeforeMove !== valuesAfterMove[i]) {\r\n        changesMade = true;\r\n      }\r\n    });\r\n\r\n    if (changesMade) {\r\n      this.setCellValue(this.getRandomCellCoords(), this.getRandomCellValue());\r\n    }\r\n  };\r\n\r\n  manipulateMatrixCells(useMatrix) {\r\n    for (let i = 0; i < useMatrix.length; i++) {\r\n      this.moveCells(useMatrix[i]);\r\n      this.mergeCells(useMatrix[i]);\r\n      this.moveCells(useMatrix[i]);\r\n    }\r\n  };\r\n\r\n  rotateMatrix(useMatrix, numberOfTimes = 1) {\r\n    // This function rotates matrix clockwise\r\n    for (let rotations = 0; rotations < numberOfTimes; rotations++) {\r\n      const initialMatrix = this.getMatrixCopy(useMatrix);\r\n\r\n      for (let i = 0; i < initialMatrix.length; i++) {\r\n        for (let j = 0; j < initialMatrix.length; j++) {\r\n          const k = initialMatrix.length - 1 - i;\r\n\r\n          useMatrix[j][k] = initialMatrix[i][j];\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  getMatrixCopy(useMatrix) {\r\n    return useMatrix.map(row => {\r\n      return [...row];\r\n    });\r\n  };\r\n\r\n  moveCells(row) {\r\n    let madeMoves = true;\r\n\r\n    while (madeMoves) {\r\n      let movesCounter = 0;\r\n\r\n      for (let i = 0; i < row.length - 1; i++) {\r\n        if (row[i] === 0 && row[i + 1] !== 0) {\r\n          row[i] = row[i + 1];\r\n          row[i + 1] = 0;\r\n          movesCounter++;\r\n        }\r\n      }\r\n\r\n      madeMoves = movesCounter > 0;\r\n    }\r\n  };\r\n\r\n  mergeCells(row) {\r\n    for (let i = 0; i < row.length - 1; i++) {\r\n      if (row[i] === row[i + 1] && row[i] !== 0) {\r\n        row[i] *= MULTIPLIER;\r\n        row[i + 1] = 0;\r\n        this.score += row[i];\r\n      }\r\n    }\r\n  };\r\n\r\n  handleStart() {\r\n    this.setCellValue(this.getRandomCellCoords(), this.getRandomCellValue());\r\n    this.setCellValue(this.getRandomCellCoords(), this.getRandomCellValue());\r\n\r\n    this.render();\r\n  };\r\n\r\n  handleRestart() {\r\n    this.matrix = [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ];\r\n    this.score = 0;\r\n    winMessage.classList.toggle('hidden', true);\r\n    loseMessage.classList.toggle('hidden', true);\r\n    this.render();\r\n  };\r\n\r\n  setCellValue(coords, value) {\r\n    const [i, j] = coords;\r\n\r\n    this.matrix[i][j] = value;\r\n  };\r\n\r\n  getRandomCellCoords() {\r\n    const availableCells = [];\r\n\r\n    this.matrix.forEach((row, i) => {\r\n      row.forEach((cell, j) => {\r\n        if (cell === 0) {\r\n          availableCells.push([i, j]);\r\n        }\r\n      });\r\n    });\r\n\r\n    const randomCellNumber = Math.floor(Math.random() * availableCells.length);\r\n\r\n    return availableCells[randomCellNumber];\r\n  };\r\n\r\n  getMatrixValues() {\r\n    const values = [];\r\n\r\n    this.matrix.forEach(row => {\r\n      row.forEach(value => {\r\n        values.push(value);\r\n      });\r\n    });\r\n\r\n    return values;\r\n  };\r\n\r\n  getRandomCellValue() {\r\n    const FIRST_VALUE = 2;\r\n    const SECOND_VALUE = 4;\r\n    const SECOND_VALUE_PROBABILITY = 0.1;\r\n\r\n    return Math.random() > SECOND_VALUE_PROBABILITY\r\n      ? FIRST_VALUE\r\n      : SECOND_VALUE;\r\n  };\r\n\r\n  render() {\r\n    this.renderCells();\r\n    this.renderScore();\r\n    this.renderActionButton();\r\n    this.renderMessages();\r\n  };\r\n\r\n  renderCells() {\r\n    const cells = root.querySelectorAll('.field-cell');\r\n    const matrixValues = this.getMatrixValues();\r\n\r\n    cells.forEach((cell, i) => {\r\n      const value = matrixValues[i];\r\n\r\n      if (value !== 0) {\r\n        const useClass = `field-cell--${value}`;\r\n\r\n        cell.innerText = value;\r\n\r\n        if (cell.classList.length > 1) {\r\n          cell.classList.replace(cell.classList[1], useClass);\r\n        } else {\r\n          cell.classList.add(useClass);\r\n        }\r\n      } else {\r\n        cell.classList.remove(cell.classList[1]);\r\n        cell.innerText = '';\r\n      }\r\n    });\r\n  };\r\n\r\n  renderScore() {\r\n    gameScore.innerText = this.score;\r\n  };\r\n\r\n  renderActionButton() {\r\n    actionButton.classList.toggle('start', !this.isStarted);\r\n    actionButton.classList.toggle('restart', this.isStarted);\r\n    actionButton.innerText = this.isStarted ? 'Restart' : 'Start';\r\n  };\r\n\r\n  renderMessages() {\r\n    startMessage.classList.toggle('hidden', this.isStarted);\r\n    winMessage.classList.toggle('hidden', !this.didWin());\r\n    loseMessage.classList.toggle('hidden', !this.didLose());\r\n  };\r\n\r\n  didWin() {\r\n    return this.getMatrixValues().includes(2048);\r\n  };\r\n\r\n  didLose() {\r\n    const values = this.getMatrixValues();\r\n    const testMatrixes = [\r\n      this.getMatrixCopy(this.matrix),\r\n      this.getMatrixCopy(this.matrix),\r\n    ];\r\n\r\n    this.rotateMatrix(testMatrixes[1]);\r\n\r\n    if (values.includes(0)) {\r\n      return false;\r\n    }\r\n\r\n    for (const testMatrix of testMatrixes) {\r\n      for (let i = 0; i < testMatrix.length; i++) {\r\n        for (let j = 0; j < testMatrix[i].length - 1; j++) {\r\n          if (testMatrix[i][j] === testMatrix[i][j + 1]) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n};\r\n\r\nconst game = new Game();\r\n\r\ngame.startApp();\r\n"]}